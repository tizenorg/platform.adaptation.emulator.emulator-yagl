#do not edit this file directly
#if you want to change settings below like turn on debug info or optimization
#create Make.config file in top directory and set all vars you need there

-include $(TOP_DIR)/Make.config

#!USER CONFIGURABLE BEGIN!

#default config
AR                       = $(CROSS_COMPILE)ar
CC                       = $(CROSS_COMPILE)gcc
CXX                      = $(CROSS_COMPILE)g++
STRIP                    = $(CROSS_COMPILE)strip
DEBUG                   ?= n
DEBUG_INFO              ?= n
OPTIMIZE                ?= y
V                       ?= 0

#default paths
X11_HOME_DIR            ?= /usr
X11_INCLUDE_DIR         ?= $(X11_HOME_DIR)/include
X11_LIB_DIR             ?= $(X11_HOME_DIR)/lib

LIBDRM_HOME_DIR         ?= /usr
LIBDRM_INCLUDE_DIR      ?= $(LIBDRM_HOME_DIR)/include/libdrm
LIBDRM_LIB_DIR          ?= $(LIBDRM_HOME_DIR)/lib

#install dir
INSTALL_DIR             ?= /usr/local
INSTALL_LIB_DIR         ?= $(INSTALL_DIR)/lib

#!USER CONFIGURABLE END!

#project defaults
BIN_PREFIX              ?=
OBJ_PREFIX              ?= $(BIN_PREFIX)

#base dirs
BUILD_DIR                = $(TOP_DIR)/build
BIN_DIR                  = $(BUILD_DIR)/bin$(BIN_PREFIX)
LIB_DIR                  = $(BUILD_DIR)/lib
OBJ_DIR                  = $(BUILD_DIR)/obj$(OBJ_PREFIX)
INCLUDE_DIR              = $(TOP_DIR)/include

#compiler settings
CFLAGS                  += -Wall -Wextra -Wno-unused -D_REENTRANT -fPIC -DPIC -fvisibility=hidden
LDFLAGS                 +=
ifneq ($(DEBUG),y)
CFLAGS                  += -DNDEBUG
endif
ifeq ($(DEBUG_INFO),y)
CFLAGS                  += -g
endif
ifeq ($(OPTIMIZE),y)
CFLAGS                  += -O2
endif
CFLAGS                  += -I. -I$(INCLUDE_DIR) -I$(X11_INCLUDE_DIR) -I$(LIBDRM_INCLUDE_DIR)
LDFLAGS                 += -L$(LIB_DIR) -L$(X11_LIB_DIR) -L$(LIBDRM_LIB_DIR) \
                           -Wl,-rpath-link=$(LIB_DIR) -Wl,-rpath-link=$(X11_LIB_DIR) -Wl,-rpath-link=$(LIBDRM_LIB_DIR)
CXXFLAGS                += $(CFLAGS) -fvisibility-inlines-hidden
#objects
SOURCES                 ?= $(wildcard *.c) $(wildcard *.cpp)
OBJS                    ?= $(foreach file, $(basename $(SOURCES)), $(OBJ_DIR)/$(file).o)
DEPS                    ?= $(foreach file, $(basename $(SOURCES)), $(OBJ_DIR)/$(file).d)

#rules

EVERYTHING = all clean install install-strip

.PHONY::     all clean install install-strip

all:: $(TARGETS)

.SUFFIXES:

$(BIN_DIR) $(LIB_DIR) $(OBJ_DIR) $(INSTALL_LIB_DIR):
ifeq ($(V),0)
	@echo [MKDIR] $@
	@mkdir -p "$@"
else
	mkdir -p "$@"
endif

$(OBJ_DIR)/%.d: %.c
ifeq ($(V),0)
	@echo [DEP] $(@F)
endif
	@$(CC) -M -MG $(CFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,$(OBJ_DIR)/\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$;

$(OBJ_DIR)/%.o: %.c
ifeq ($(V),0)
	@echo [CC] $(<F)
	@$(CC) -c $(CFLAGS) -o $@ $<
else
	$(CC) -c $(CFLAGS) -o $@ $<
endif

$(OBJ_DIR)/%.d: %.cpp
ifeq ($(V),0)
	@echo [DEP] $(@F)
endif
	@$(CXX) -M -MG $(CXXFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,$(OBJ_DIR)/\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$;

$(OBJ_DIR)/%.o: %.cpp
ifeq ($(V),0)
	@echo [CXX] $(<F)
	@$(CXX) -c $(CXXFLAGS) -o $@ $<
else
	$(CXX) -c $(CXXFLAGS) -o $@ $<
endif

clean::
ifeq ($(V),0)
	@echo [RM] $(OBJS) $(DEPS) $(TARGETS)
	@rm -f $(OBJS) $(DEPS) $(TARGETS)
else
	rm -f $(OBJS) $(DEPS) $(TARGETS)
endif

install::

install-strip::

ifneq ($(wildcard $(DEPS)),)
-include $(DEPS)
endif
